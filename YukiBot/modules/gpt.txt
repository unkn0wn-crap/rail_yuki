import requests

from pyrogram import filters, Client
from pyrogram.types import Message, InputMediaPhoto
from YukiBot import pbot as app
from pyrogram.errors import MediaCaptionTooLong

api_url_gpt = "https://nandha-api.onrender.com/ai/gpt"
api_url_bard = "https://nandha-api.onrender.com/ai/bard"

def fetch_data(api_url: str, query: str) -> tuple:
    try:
        response = requests.get(f"{api_url}/{query}")
        response.raise_for_status()
        data = response.json()
        return data.get("content", "‚¨§ …¥·¥è  Ä·¥ás·¥ò·¥è…¥s·¥á “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ä·¥ò…™."), data.get("images", False)
    except requests.exceptions.RequestException as e:
        return None, f"‚¨§  Ä·¥á«´·¥ú·¥ás·¥õ ·¥á Ä Ä·¥è Ä ‚û• {e}"
    except Exception as e:
        return None, f"‚¨§ ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ‚û• {str(e)}"

@app.on_message(filters.command(["ask"]))
async def chatgpt(_, message):
    if len(message.command) < 2:
        return await message.reply_text("‚¨§ ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥á Ä è.")

    query = " ".join(message.command[1:])    
    txt = await message.reply_text("‚¨§ ·¥°·¥Ä…™·¥õ ·¥ò·¥Ä·¥õ…™·¥á…¥·¥õ ü è,  Ä·¥á«´·¥ú·¥ás·¥õ…™…¥…¢ ·¥õ·¥è ·¥Ä·¥ò…™...")
    await txt.edit("üí≠")
    api_response, error_message = fetch_data(api_url_gpt, query)
    await txt.edit(api_response or error_message)





@app.on_message(filters.command(["bard"]))
async def bard(_, message):
    chat_id = message.chat.id
    message_id = message.id
    
    if len(message.command) < 2:
        return await message.reply_text("‚¨§ ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥á Ä è.")

    query = " ".join(message.command[1:])
    txt = await message.reply_text("‚¨§ ·¥°·¥Ä…™·¥õ ·¥ò·¥Ä·¥õ…™·¥á…¥·¥õ ü è,  Ä·¥á«´·¥ú·¥ás·¥õ…™…¥…¢ ·¥õ·¥è ·¥Ä·¥ò…™...")
    await txt.edit("üí≠")
    
    api_response, images = fetch_data(api_url_bard, query)

    medias = []
    bard = str(api_response)
    try:
       photo_url = images[-1]
    except:
        pass
    
    
    if images:
        if len(images) > 1:
            for url in images:
                medias.append(InputMediaPhoto(media=url, caption=None))
                        
            medias[-1] = InputMediaPhoto(media=photo_url, caption=bard)
            
            try:
                await app.send_media_group(chat_id=chat_id, media=medias, reply_to_message_id=message_id)
                return await txt.delete()
            except Exception as e:
                return await txt.edit(str(e))
        elif len(images) < 2:
            image_url = images[0]
            try:
                await message.reply_photo(photo=image_url, caption=bard)
                return await txt.delete()
            except MediaCaptionTooLong:
                return await txt.edit(bard)
            except Exception as e:
                return await txt.edit(str(e))
        else:
            return await txt.edit('‚¨§ s·¥è·¥ç·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢')
    else:
        try:
            return await txt.edit(bard)
        except Exception as e:
            return await txt.edit(str(e))


__mod_name__ = "·¥Ä…™-…¢·¥ò·¥õX"

__help__ = """

 ‚¨§ /ask *‚û•*  Ä·¥á·¥ò ü è ·¥õo ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ üí≠
 ‚¨§ /gpt *‚û•*  Ä·¥á·¥ò ü è ·¥õo ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ üí≠
 ‚¨§ /bard *‚û•*  Ä·¥á·¥ò ü è ·¥õo ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ üí≠
 """
